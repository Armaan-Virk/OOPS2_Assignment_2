@page "/reservations"
@using Assign2.Data
@inject Data.ReservationManager ReservationManager
@inject Data.FlightManager FlightManager

<div class="container mt-5">
    <h2>Make a Reservation</h2>
    <form class="row g-3">
        <div class="col-md-4">
            <label for="flightCode" class="form-label">Flight Code</label>
            <input id="flightCode" @bind="FlightCode" class="form-control" placeholder="Enter flight code" />
        </div>
        <div class="col-md-4">
            <label for="name" class="form-label">Name</label>
            <input id="name" @bind="Name" class="form-control" placeholder="Enter your name" />
        </div>
        <div class="col-md-4">
            <label for="citizenship" class="form-label">Citizenship</label>
            <input id="citizenship" @bind="Citizenship" class="form-control" placeholder="Enter citizenship" />
        </div>
        <div class="col-12">
            <button type="button" @onclick="CreateReservation" class="btn btn-primary">Reserve</button>
        </div>
    </form>

    <h4 class="mt-5">Your Reservations</h4>
    <table class="table table-hover mt-3">
        <thead>
            <tr>
                <th>Reservation Code</th>
                <th>Name</th>
                <th>Citizenship</th>
                <th>Flight</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reservation in Reservations)
            {
                <tr>
                    <td>@reservation.ReservationCode</td>
                    <td>@reservation.Name</td>
                    <td>@reservation.Citizenship</td>
                    <td>@reservation.Flight.Code</td>
                    <td>@(reservation.IsActive ? "Active" : "Inactive")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private string FlightCode;
    private string Name;
    private string Citizenship;
    private List<Assign2.Data.Reservation> Reservations = new();


    private async Task CreateReservation()
    {
        try
        {
            // Find the flight using the FlightCode
            var flight = FlightManager.FindFlightByCode(FlightCode);
            if (flight == null)
            {
                Console.WriteLine("Error: Flight not found");
                return;
            }

            // Make the reservation
            var reservation = ReservationManager.MakeReservation(flight, Name, Citizenship);

            // Add the reservation to the list
            Reservations.Add(reservation);

            // Clear input fields
            FlightCode = string.Empty;
            Name = string.Empty;
            Citizenship = string.Empty;

            Console.WriteLine($"Reservation created successfully: {reservation.ReservationCode}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load initial reservations (if applicable)
        Reservations = ReservationManager.FindReservations();
    }
}
